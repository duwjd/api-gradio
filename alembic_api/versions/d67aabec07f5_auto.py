"""auto

Revision ID: d67aabec07f5
Revises: 015c04ff57a7
Create Date: 2025-03-24 14:39:45.949407

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.engine.reflection import Inspector

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "d67aabec07f5"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "prompt",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(length=255), nullable=False),
        sa.Column("group", sa.String(length=255), nullable=False),
        sa.Column("option", sa.String(length=255), nullable=True),
        sa.Column("order", sa.SmallInteger(), nullable=False),
        sa.Column("system_prompt", sa.Text(), nullable=False),
        sa.Column("prompt", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "resource_analysis",
        sa.Column(
            "code",
            sa.String(length=255),
            nullable=False,
            comment="분석 코드 (ex: ANALYSIS-000001)",
        ),
        sa.Column(
            "role",
            sa.String(length=255),
            nullable=False,
            comment="분석 role 배열(ex: [ANALYSIS-ROLE-000001, ANALYSIS-ROLE-000002, ANALYSIS-ROLE-000003])",
        ),
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="분석 셋 이름 (ex: gemgem 문서 분석용)",
        ),
        sa.Column(
            "type",
            sa.String(length=255),
            nullable=False,
            comment="분석 타입(gg-project)",
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("code"),
    )
    op.create_table(
        "resource_analysis_role",
        sa.Column(
            "code",
            sa.String(length=255),
            nullable=False,
            comment="분석 role 코드 (ex: ANALYSIS-ROLE-000001)",
        ),
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="분석 role 이름(ex: llm, 문서 요약, 이미지 추출)",
        ),
        sa.Column(
            "file_name", sa.String(length=255), nullable=False, comment="파일 이름.py"
        ),
        sa.Column(
            "function_name", sa.String(length=255), nullable=False, comment="함수 이름"
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False, comment="활성 여부"),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("code"),
    )
    op.create_table(
        "resource_music",
        sa.Column(
            "music_id",
            mysql.INTEGER(display_width=11),
            nullable=False,
            comment="음악 id",
        ),
        sa.Column(
            "license", sa.String(length=255), nullable=False, comment="음악 라이센스"
        ),
        sa.Column(
            "url",
            sa.String(length=255),
            nullable=False,
            comment="음악 url (ex: https://cat-10k1m.s3.ap-northeast-2.amazonaws.com/library/sound/bgm/brand/BalloonPlanet-Cool_My_Bass.mp3)",
        ),
        sa.Column("name", sa.String(length=255), nullable=False, comment="음악 이름"),
        sa.Column(
            "duration",
            mysql.INTEGER(display_width=11),
            nullable=False,
            comment="음악 길이 (초)",
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("music_id"),
    )
    op.create_table(
        "resource_music_keyword",
        sa.Column(
            "keyword_id",
            mysql.INTEGER(display_width=11),
            nullable=False,
            comment="키워드 id",
        ),
        sa.Column(
            "keyword_ko", sa.String(length=255), nullable=True, comment="한국어 키워드"
        ),
        sa.Column(
            "keyword_en", sa.String(length=255), nullable=True, comment="영어 키워드"
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("keyword_id"),
    )
    op.create_table(
        "resource_music_weight",
        sa.Column(
            "music_id",
            mysql.INTEGER(display_width=11),
            nullable=False,
            comment="음악 id",
        ),
        sa.Column(
            "keyword_id",
            mysql.INTEGER(display_width=11),
            nullable=False,
            comment="키워드 id",
        ),
        sa.Column("weight", sa.Float(), nullable=True, comment="가중치"),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["keyword_id"],
            ["resource_music_keyword.keyword_id"],
        ),
        sa.PrimaryKeyConstraint("music_id", "keyword_id"),
    )

    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)

    # 테이블 목록 조회
    tables = inspector.get_table_names()

    # task_llm 테이블이 없다면 생성
    if "task_llm" not in tables:
        op.create_table(
            "task_llm",
            sa.Column("id", sa.Integer(), primary_key=True, autoincrement=True),
            sa.Column("user_id", sa.Integer(), nullable=False),
            sa.Column("project_id", sa.Integer(), nullable=False),
            sa.Column("status", sa.String(length=255), nullable=False),
            sa.Column("progress", sa.SmallInteger(), nullable=False),
            sa.Column("error_code", sa.SmallInteger(), nullable=True),
            sa.Column("error_message", sa.String(length=255), nullable=True),
            sa.Column("result", sa.Text(), nullable=True),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.Column("deleted_at", sa.DateTime(), nullable=True),
        )
    else:
        # 테이블이 이미 존재할 경우 컬럼만 추가
        op.add_column("task_llm", sa.Column("created_at", sa.DateTime(), nullable=True))
        op.add_column("task_llm", sa.Column("updated_at", sa.DateTime(), nullable=True))
        op.add_column("task_llm", sa.Column("deleted_at", sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
